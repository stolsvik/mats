node {
    // Version of node to use.
    version = '12.14.0'

    // Version of Yarn to use.
    yarnVersion = '1.21.1'

    // Download node rather than using global
    download = true

    nodeModulesDir = file("${projectDir}/client/javascript")
}

task yarnInstall(type: YarnTask) {
    execOverrides {
        it.workingDir = "${projectDir}/client/javascript"
    }
}

// Execute the integration tests against a test MatsTestWebsocketServer
task javascriptTest(type: YarnTask, dependsOn: [yarnInstall, startMatsTestWebsocketServer]) {
    args = ['testAll']

    doFirst {
        execOverrides {
            it.workingDir = "${projectDir}/client/javascript"
            it.environment("MATS_SOCKET_URLS", startMatsTestWebsocketServer.wsUrls.join(","))
        }
    }
}

// We need to ensure that javascript tests are run before stop
stopMatsTestWebsocketServer.mustRunAfter(javascriptTest)

// :: Helper methods for people too lazy to figure out node and run these from the javascript client folder.

// Run the integration test continuously, retriggering on change in the javascript code. This assumes there is
// a server listening on ws://localhost:8080/matssocket
task javascriptTestWatch(type: YarnTask, dependsOn: [yarnInstall]) {
    args = ['testAll', '--watch']

    execOverrides {
        it.workingDir = "${projectDir}/client/javascript"
    }
}

check.dependsOn(javascriptTest)
test.dependsOn(javascriptTest)

// Start a server to host sample html files along with the MatsSocket.js library
task serveHtml(type: YarnTask, dependsOn: [yarnInstall]) {
    args = ['run', 'serve']

    execOverrides {
        it.workingDir = "${projectDir}/client/javascript"
    }
}

task archiveJavaScriptLib(type: Zip) {
    from "$projectDir/client/javascript/lib"
    into "mats_socket-${project.version}-js"
    archiveClassifier = "javascript"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact archiveJavaScriptLib
        }
    }
}