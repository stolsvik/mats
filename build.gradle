// Customize the Gradle Wrapper generation task.
wrapper {
    gradleVersion = "6.2"
    // Use "-all"-version of distribution, since IntelliJ works better then..
    setDistributionType(Wrapper.DistributionType.ALL)
}

// Version of Mats
allprojects {
}

// Spring, ActiveMQ and Jackson JSON versions: Used in several sub projects
ext {
    activeMqVersion = '5.15.+'
    springVersion = "4.+"
    jacksonVersion = '2.10.+'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'

    repositories { mavenCentral() }

    project.buildDir = 'build-gradle'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.+'
        testCompile 'junit:junit:4.12'
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        // without the -quiet option, the build fails
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.incremental = true
        //options.compilerArgs += ['-Xlint:all', '-Xlint:-serial', '-Werror']

        // Removing -Werror while making MatsSockets. TODO: Get it back! 2019-12-01
        options.compilerArgs += ['-Xlint:all', '-Xlint:-serial']
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'MATS',
                    'Implementation-Version': version
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'MATS^3'
                    description = 'Message-based Asynchronous Transactional Staged Stateful Services'
                    url = 'https://github.com/stolsvik/mats'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'stolsvik'
                            name = 'Endre StÃ¸lsvik'
                            email = 'endre@stolsvik.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/stolsvik/mats.git'
                        developerConnection = 'scm:git:ssh:git@github.com:stolsvik/mats.git'
                        url = 'https://github.com/stolsvik/mats'
                    }
                }
                from components.java
            }
        }
    }

    // ------------------------------------------------
    // -- Release configuration. The release file is not checked in to version control, and should
    //    instead be kept locally to configure how to deploy this.
    if (file("${rootProject.projectDir}/repositories.gradle").exists()) {
        apply from: "${rootProject.projectDir}/repositories.gradle"
    }

    // ------------------------------------------------
    // -- Boring stuff, should be a plugin.

    task systemInformation {
        doLast {
            println "\n** Java properties [System.getProperties()], sorted:\n"
            System.properties.sort().each { k, v ->
                println("$k = $v")
            }
            println "\n** Environment [System.getenv()], sorted:\n"
            System.env.sort().each { k, v ->
                println("$k = $v")
            }
            println ''
            println "** Java Version:   " + System.getProperty("java.version")
            println "** Groovy Version: " + GroovySystem.getVersion()
            println "** Gradle Version: " + gradle.gradleVersion
        }
    }

    // Eclipse-plugin configuration
    tasks.eclipse.dependsOn(cleanEclipse)
    eclipse {
        // project { natures 'org.springsource.ide.eclipse.gradle.core.nature'; }
        classpath {
            defaultOutputDir = file('build-eclipse')
            file {
                whenMerged { classpath ->
                    // Dump the classpath entries so that we can see them
                    classpath.entries.findAll { entry ->
                        println("Entry: $entry")
                    }
                }
            }
        }
    }
}
